{***********************************************
Arpeggiator (listener callback implementation)
Author: Native Instruments
Written by: Mario Kruselj a.k.a. EvilDragon
Modified: May 21, 2021
*************************************************}

on init
    message("")

    set_ui_height(4)
    set_script_title("Arpeggiator (Sync)")

    declare const $REC_TIME_TRANSPORT_RUNNING := 10
    declare const $REC_TIME_TRANSPORT_STOPPED := 30
    declare const $LATCH_TIME := 300
    declare const $TICKS_PER_BEAT := 24
    declare const $MAX_OCTAVE_RANGE := 4
    declare const $MAX_REPEATS := 8
    declare const $MAX_STEPS := 64

    declare $beat_grid := 16
    declare $check_id
    declare $chord_oct_counter
    declare $cursor
    declare $cursor_helper
    declare $grid_counter
    declare $i
    declare $j
    declare $k
    declare $o
    declare $p
    declare $temp1
    declare $temp2
    declare $temp3
    declare $last_random_note
    declare $oct_counter
    declare $old_latch_time
    declare $played_duration
    declare $played_note
    declare $played_velocity
    declare $play_counter
    declare $prev_arp_mode
    declare $seq_running
    declare $step_counter
    declare $step_direction
    declare $step_duration
    declare $steps_played
    declare $prev_step := -1
    declare $repeat_counter_note
    declare $repeat_counter_note_other
    declare $repeat_counter_table
    declare $ticks_per_step := 6
    declare $tick_counter
    declare $up_down_counter
    declare $up_down_direction
    declare $up_down_oct_counter
    declare $wait_time
    declare %note_buffer[128] { all held notes in the played order }
    declare %note_ids[128]
    declare %play_buffer[128] { the actual notes to be played }
    declare %play_down_buffer[128]
    declare %play_up_buffer[128]
    declare %play_vel_buffer[128] := (-1)
    declare %play_up_vel_buffer[128] := (-1)
    declare %play_down_vel_buffer[128] := (-1)
    declare %sorted_buffer[128]
    declare %sorted_vel_buffer[128]
    declare %vel_buffer[128] := (-1)
    declare !state[2]
    !state[0] := " Off"
    !state[1] := " On"
    declare !rates[9]
    !rates[0] := " 1/64 T"
    !rates[1] := " 1/32 T"
    !rates[2] := " 1/32"
    !rates[3] := " 1/16 T"
    !rates[4] := " 1/16"
    !rates[5] := " 1/8 T"
    !rates[6] := " 1/8"
    !rates[7] := " 1/4 T"
    !rates[8] := " 1/4"

    declare ui_switch $Arp
    declare ui_switch $Latch
    declare ui_switch $ScaleByVel
    declare ui_menu $NoteOrder
    add_menu_item($NoteOrder, "As Played", 0)
    add_menu_item($NoteOrder, "Up", 1)
    add_menu_item($NoteOrder, "Down", 2)
    add_menu_item($NoteOrder, "Up - Down", 3)
    add_menu_item($NoteOrder, "Down - Up", 4)
    add_menu_item($NoteOrder, "Random", 5)
    add_menu_item($NoteOrder, "Chord", 6)
    declare ui_menu $TableOrder
    add_menu_item($TableOrder, ">>", 0)
    add_menu_item($TableOrder, "<<", 1)
    add_menu_item($TableOrder, ">> <<", 2)
    add_menu_item($TableOrder, "<< >>", 3)
    add_menu_item($TableOrder, "???", 4)
    add_menu_item($TableOrder, "Host Sync", 5)
    declare ui_knob $Rate (0, 8, 1)
    declare ui_knob $Duration (1, 200, 1)
    declare ui_knob $Swing (0, 50, 1)
    declare ui_knob $Octave (-$MAX_OCTAVE_RANGE, $MAX_OCTAVE_RANGE, 1)
    declare ui_knob $Repeats (1, $MAX_REPEATS, 1)
    declare ui_knob $Steps (2, $MAX_STEPS, 1)
    declare ui_table %Pattern [$MAX_STEPS] (4, 4, 127)
    declare ui_table %Current [$MAX_STEPS] (4, 1, 1)
    declare ui_label $L1 (1, 1)
    declare ui_label $L2 (1, 1)

    $Duration := 100
    $Steps := 16
    $Rate := 4
    $Octave := 0

    $i := 0
    while ($i < $MAX_STEPS)
        %Pattern[$i] := 127
        inc($i)
    end while

    set_text($Rate, "Rate")
    set_text($Duration, "Duration")
    set_text($Swing, "Swing")
    set_text($Octave, "Octave")
    set_text($Repeats, "Repeats")
    set_text($Steps, "Steps")
    set_text($ScaleByVel, "Scale By Velocity")
    set_text($L1, "Note Order:")
    set_text($L2, "Table Order:")

    set_knob_defval($Duration, 100)
    set_knob_defval($Steps, 16)
    set_knob_defval($Rate, 4)
    set_knob_defval($Octave, 0)

    set_control_par(get_ui_id(%Current), $CONTROL_PAR_WIDTH, 363)
    set_control_par(get_ui_id(%Current), $CONTROL_PAR_HEIGHT, 10)

    set_knob_unit($Duration, $KNOB_UNIT_PERCENT)
    set_knob_unit($Swing, $KNOB_UNIT_PERCENT)

    set_control_help($NoteOrder,"Note Order: Selects the order in which the input notes are going to be arpeggiated.")
    set_control_help($TableOrder,"Velocity Pattern Order: Selects the order in which the velocities of generated MIDI notes are read from the <Velocity Pattern> table. When set to Host Sync, <Velocity Pattern> readout will be synchronized to the song position pointer when host's transport is running, ensuring identical playback throughout the song.")
    set_control_help($ScaleByVel,"Scale By Velocity: When enabled, played velocities will be scaled by the columns of the rhythmic grid. When disabled, played velocities are ignored and taken from <Velocity Pattern> table.")
    set_control_help($Rate,"Rate: Adjusts the arpeggiator rate in rhythmical values, synced to the host clock. T stands for triplet.")
    set_control_help($Duration,"Duration: Adjusts the duration of the arpeggiated MIDI notes in percent (using the <Rate> note value as base). This will only change the length of generated MIDI notes, not the volume envelope.")
    set_control_help($Swing,"Swing: Pushes every other step forward by the specified amount in percent, in order to create a swing feel.")
    set_control_help($Octave,"Octave: Adjusts the distribution of the arpeggio pattern in various octaves. The arpeggio pattern cycles from the played octave to the octave set upwards (if positive) or downwards (if negative).")
    set_control_help($Repeats,"Repeats: Adjusts the number of repeats of each note in the arpeggiator pattern.")
    set_control_help($Arp,"Arpeggiator Toggle: Enables or disables the arpeggiator.")
    set_control_help($Latch,"Latch Mode: When enabled, all played keys will be held indefinitely (or until <Latch> is disabled).")
    set_control_help($Steps,"Steps: Adjusts the number of steps in the velocity pattern.")
    set_control_help(%Pattern,"Velocity Pattern: Adjusts the velocity pattern of the arpeggiated notes. If a column is set to 0, the step will not be played. The actual velocity depends on <Scale by Velocity> button, the length of the pattern can be set with <Steps>.")

    make_persistent($Arp)
    make_persistent($Latch)
    make_persistent($ScaleByVel)
    make_persistent($NoteOrder)
    make_persistent($TableOrder)
    make_persistent($Rate)
    make_persistent($Duration)
    make_persistent($Swing)
    make_persistent($Octave)
    make_persistent($Repeats)
    make_persistent($Steps)
    make_persistent(%Pattern)
    make_persistent($beat_grid)
    make_persistent($prev_arp_mode)
    make_persistent($ticks_per_step)

    move_control($Arp, 6, 2)
    move_control($Latch, 6, 3)
    move_control($ScaleByVel, 6, 8)
    move_control($Rate, 1, 2)
    move_control($Duration, 2, 2)
    move_control($Swing, 3, 2)
    move_control($Octave, 4, 2)
    move_control($Repeats, 5, 2)
    move_control($Steps, 6, 5)
    move_control($NoteOrder, 1, 6)
    move_control($TableOrder, 1, 8)
    move_control(%Pattern, 2, 5)
    move_control($L1, 1, 5)
    move_control($L2, 1, 7)
    move_control_px(%Current, 158, 79)

    set_listener($NI_SIGNAL_TIMER_BEAT, $TICKS_PER_BEAT)

    { currently played step is also sent through PGS, so it can be used in other script slots, if necessary }
    pgs_create_key(ARP_COUNTER, 1)
    pgs_set_key_val(ARP_COUNTER, 0, -1)
end on


on persistence_changed
    set_table_steps_shown(%Pattern, $Steps)
    set_table_steps_shown(%Current, $Steps)
    set_text($Arp, "Arp" & !state[$Arp])
    set_text($Latch, "Latch" & !state[$Latch])
    set_knob_label($Rate, !rates[$Rate])
    set_knob_label($Octave, "    " & $Octave)
end on


function ChangeRate()
    select ($Rate)
        case 0 { 1/64 T }
            $ticks_per_step := 1
            $beat_grid := 48
        case 1 { 1/32 T }
            $ticks_per_step := 2
            $beat_grid := 48
        case 2 { 1/32 }
            $ticks_per_step := 3
            $beat_grid := 32
        case 3 { 1/16 T }
            $ticks_per_step := 4
            $beat_grid := 24
        case 4 { 1/16 }
            $ticks_per_step := 6
            $beat_grid := 16
        case 5 { 1/8 T }
            $ticks_per_step := 8
            $beat_grid := 12
        case 6 { 1/8 }
            $ticks_per_step := 12
            $beat_grid := 8
        case 7 { 1/4 T }
            $ticks_per_step := 16
            $beat_grid := 6
        case 8 { 1/4 }
            $ticks_per_step := 24
            $beat_grid := 4
    end select

    set_knob_label($Rate, !rates[$Rate])
end function

function ClearNoteBuffer()
    $i := 0
    while ($i < $cursor)
        %note_buffer[$i] := 0

        inc($i)
    end while

    $cursor := 0
end function

function StartSeq()
    $seq_running := 1
    $oct_counter := 0
    $play_counter := 0
    $up_down_direction := 0
    $up_down_counter := 0
    $up_down_oct_counter := 0
    $chord_oct_counter := 0
    $steps_played := 0

    if ($TableOrder mod 2 = 0 and $TableOrder # 5)
        if ($TableOrder = 4)
            $step_counter := random(0, $Steps - 1)
        else
            $step_counter := 0
        end if

        $step_direction := 0
        $tick_counter := -1
    else
        if ($NI_TRANSPORT_RUNNING = 0)
            $step_counter := $Steps - 1
            $step_direction := 1
            $tick_counter := -1
        end if
    end if
end function

function StopSeq()
    $seq_running := 0
    $repeat_counter_note := 0
    $repeat_counter_note_other := 0
    $repeat_counter_table := 0
    $prev_step := -1

    $j := 0
    while ($j < $MAX_STEPS)
        %Current[$j] := 0

        inc($j)
    end while

    pgs_set_key_val(ARP_COUNTER, 0, -1)
end function

function TickReceived()
    { get step counter }
    if ($TableOrder # 5)
        inc($tick_counter)

        if ($tick_counter >= $ticks_per_step)
            select ($TableOrder)
                case 0  { forward }
                    inc($step_counter)

                    if ($repeat_counter_table < $Repeats - 1)
                        dec($step_counter)
                        inc($repeat_counter_table)
                    else
                        $repeat_counter_table := 0
                    end if

                    if ($step_counter >= $Steps)
                        $step_counter := 0
                    end if
                case 1  { backward }
                    dec($step_counter)

                    if ($repeat_counter_table < $Repeats - 1)
                        inc($step_counter)
                        inc($repeat_counter_table)
                    else
                        $repeat_counter_table := 0
                    end if

                    if ($step_counter < 0)
                        $step_counter := $Steps - 1
                    end if
                case 2 to 3  { forward-backward, backward-forward }
                    if ($step_direction = 0)
                        if ($step_counter=($Steps - 1))
                            $step_direction := 1
                            dec($step_counter)

                            if ($repeat_counter_table < $Repeats - 1)
                                inc($step_counter)
                                inc($repeat_counter_table)
                            else
                                $repeat_counter_table := 0
                            end if
                        else
                            inc($step_counter)

                            if ($repeat_counter_table < $Repeats - 1)
                                dec($step_counter)
                                inc($repeat_counter_table)
                            else
                                $repeat_counter_table := 0
                            end if
                        end if
                    else
                        if ($step_counter = 0)
                            $step_direction := 0
                            inc($step_counter)

                            if ($repeat_counter_table < $Repeats - 1)
                                dec($step_counter)
                                inc($repeat_counter_table)
                            else
                                $repeat_counter_table := 0
                            end if
                        else
                            dec($step_counter)

                            if ($repeat_counter_table < $Repeats - 1)
                                inc($step_counter)
                                inc($repeat_counter_table)
                            else
                                $repeat_counter_table := 0
                            end if
                        end if
                    end if
                case 4  { non-repeating random }
                    if ($repeat_counter_table < $Repeats - 1)
                        $step_counter := $step_counter
                        inc($repeat_counter_table)
                    else
                        $step_counter := random(0, $Steps - 1)

                        if ($step_counter = $prev_step)
                            while ($step_counter = $prev_step)
                                $step_counter := random(0, $Steps - 1)
                            end while
                        end if

                        $prev_step := $step_counter
                        $repeat_counter_table := 0
                    end if
            end select

            $tick_counter := 0
        end if
    else
        if ($NI_SONG_POSITION < 0)
            exit
        else
            $tick_counter := ($NI_SONG_POSITION / 40) mod $ticks_per_step
            $step_counter := ($NI_SONG_POSITION / (960*4 / $beat_grid)) mod $Steps
        end if
    end if

    { create sorted buffer for note order up and down }
    $i := 0
    while ($i <= 127)
        if ($i < $cursor)
            %sorted_buffer[$i] := %note_buffer[$i]
            %sorted_vel_buffer[$i] := %vel_buffer[$i]
        else
            %sorted_buffer[$i] := 0
            %sorted_vel_buffer[$i] := -1
            %note_buffer[$i] := 0
            %vel_buffer[$i] := -1
        end if

        inc($i)
    end while

    { using insertion sort here because the velocity buffer needs to follow the sorting of the note buffer }
    $o := 1
    while ($o < num_elements(%sorted_buffer))
        $temp1 := %sorted_buffer[$o]
        $temp2 := %sorted_vel_buffer[$o]

        $p := $o - 1
        while ($p >= 0 and (%sorted_buffer[$p] < $temp1))
            %sorted_buffer[$p + 1] := %sorted_buffer[$p]
            %sorted_vel_buffer[$p + 1] := %sorted_vel_buffer[$p]
            dec($p)
        end while

        %sorted_buffer[$p + 1] := $temp1
        %sorted_vel_buffer[$p + 1] := $temp2

        inc($o)
    end while

    { create play buffers }
    $i := 0
    while ($i < $cursor)
        %play_buffer[$i] := %note_buffer[$i]
        %play_up_buffer[$i] := %sorted_buffer[$cursor - 1 - $i]
        %play_down_buffer[$i] := %sorted_buffer[$i]
        %play_vel_buffer[$i] := %vel_buffer[$i]
        %play_up_vel_buffer[$i] := %sorted_vel_buffer[$cursor - 1 - $i]
        %play_down_vel_buffer[$i] := %sorted_vel_buffer[$i]

        inc($i)
    end while

    { we have reached a step }
    if ($tick_counter = 0)
        $step_duration := ($DURATION_QUARTER * 4) / $beat_grid

        { current step display }
        if ($seq_running = 1)
            $j := 0
            while ($j < $MAX_STEPS)
                %Current[$j] := 0

                inc($j)
            end while

            %Current[$step_counter] := 1

            pgs_set_key_val(ARP_COUNTER, 0, $step_counter)
        end if

        { create note }
        if (%Pattern[$step_counter] > 0 and $cursor > 0 and $seq_running = 1)
            $played_duration := ($step_duration / 100) * $Duration
            $played_velocity := %Pattern[$step_counter]

            { swing implementation }
            if ($steps_played mod 2 = 1 and $Swing > 0)
                $wait_time := ($step_duration * $Swing) / 100

                if ($wait_time > 0)
                    wait($wait_time)
                end if
            end if

            select ($NoteOrder)
                case 0  { as played }
                    $played_note := %play_buffer[$play_counter] + ($oct_counter * 12)

                    if ($ScaleByVel = 1)
                        $played_velocity := %play_vel_buffer[$play_counter] * %Pattern[$step_counter] / 127
                    end if

                    if (in_range($played_note, 0, 127))
                        play_note($played_note, $played_velocity, 0, $played_duration)
                    end if
                case 1  { up }
                    $played_note := %play_up_buffer[$play_counter] + ($oct_counter * 12)

                    if ($ScaleByVel = 1)
                        $played_velocity := %play_up_vel_buffer[$play_counter] * %Pattern[$step_counter] / 127
                    end if

                    if (in_range($played_note, 0, 127))
                        play_note($played_note, $played_velocity, 0, $played_duration)
                    end if
                case 2  { down }
                    $played_note := %play_down_buffer[$play_counter] + ($oct_counter * 12)

                    if ($ScaleByVel = 1)
                        $played_velocity := %play_down_vel_buffer[$play_counter] * %Pattern[$step_counter] / 127
                    end if

                    if (in_range($played_note, 0, 127))
                        play_note($played_note, $played_velocity, 0, $played_duration)
                    end if
                case 3 to 4  { up-down, down-up }
                    if ($NoteOrder = 3)
                        $played_note := %play_up_buffer[$up_down_counter] + ($up_down_oct_counter * 12)

                        if ($ScaleByVel = 1)
                            $played_velocity := %play_up_vel_buffer[$play_counter] * %Pattern[$step_counter] / 127
                        end if
                    else
                        $played_note := %play_down_buffer[$up_down_counter] + ($up_down_oct_counter * 12)

                        if ($ScaleByVel = 1)
                            $played_velocity := %play_down_vel_buffer[$play_counter] * %Pattern[$step_counter] / 127
                        end if
                    end if

                    if (in_range($played_note, 0, 127))
                        play_note($played_note, $played_velocity, 0, $played_duration)
                    end if

                    if ($cursor = 1)
                        if ($repeat_counter_note_other < $Repeats - 1)
                            inc($repeat_counter_note_other)
                        else
                            $repeat_counter_note_other := 0
                        end if

                        if ($repeat_counter_note_other = 0)
                            if ($Octave > 0)
                                inc($up_down_oct_counter)
                            end if

                            if ($Octave < 0)
                                dec($up_down_oct_counter)
                            end if
                        end if

                        if (abs($up_down_oct_counter) > abs($Octave))
                            $up_down_oct_counter := 0
                        end if
                    end if

                    if ($cursor = 2)
                        inc($up_down_counter)

                        if ($repeat_counter_note_other < $Repeats - 1)
                            dec($up_down_counter)
                            inc($repeat_counter_note_other)
                        else
                            $repeat_counter_note_other := 0
                        end if

                        if ($up_down_counter = 2)
                            inc($up_down_oct_counter)

                            if ($up_down_oct_counter > $Octave)
                                $up_down_oct_counter := 0
                            end if

                            $up_down_counter := 0
                        end if
                    end if

                    if ($cursor > 2)
                        if ($up_down_counter >= $cursor - 1)
                            $up_down_direction := 1  { go down }
                        end if

                        if ($up_down_counter <= 0)
                            $up_down_direction := 0  { go up }
                        end if

                        if ($up_down_direction = 1)
                            dec($up_down_counter)

                            if ($repeat_counter_note_other < $Repeats - 1)
                                inc($up_down_counter)
                                inc($repeat_counter_note_other)
                            else
                                $repeat_counter_note_other := 0
                            end if
                        else
                            inc($up_down_counter)

                            if ($repeat_counter_note_other < $Repeats - 1)
                                dec($up_down_counter)
                                inc($repeat_counter_note_other)
                            else
                                $repeat_counter_note_other := 0
                            end if
                        end if

                        if ($up_down_counter = 0 and $up_down_direction = 1)
                            if ($Octave > 0)
                                inc($up_down_oct_counter)
                            end if

                            if ($Octave < 0)
                                dec($up_down_oct_counter)
                            end if

                            if (abs($up_down_oct_counter) > abs($Octave))
                                $up_down_oct_counter := 0
                            end if
                        end if
                    end if
                case 5  { random }
                    if ($repeat_counter_note_other = 0)
                        $temp3 := random(0, $cursor - 1)
                        $played_note := %play_buffer[$temp3] + (random(0, $Octave) * 12)

                        { if three or more notes are played, no repetition of notes }
                        if ($cursor * ($Octave + 1) >= 3)
                            while ($played_note = $last_random_note)
                                $temp3 := random(0, $cursor - 1)
                                $played_note := %play_buffer[$temp3] + (random(0, $Octave) * 12)
                            end while
                        end if

                        if ($ScaleByVel = 1)
                            $played_velocity := %play_vel_buffer[$temp3] * %Pattern[$step_counter] / 127
                        end if
                    end if

                    if (in_range($played_note, 0, 127))
                        play_note($played_note, $played_velocity, 0, $played_duration)
                        $last_random_note := $played_note
                    end if

                    if ($repeat_counter_note_other < $Repeats - 1)
                        inc($repeat_counter_note_other)
                    else
                        $repeat_counter_note_other := 0
                    end if
                case 6  { chord }
                    $i := 0
                    while ($i < $cursor)
                        $played_note := %play_buffer[$i] + ($chord_oct_counter * 12)

                        if ($ScaleByVel = 1)
                            $played_velocity := %play_vel_buffer[$i] * %Pattern[$step_counter] / 127

                            if ($played_velocity < 1 and (%Pattern[$step_counter] > 0))
                                $played_velocity := 1
                            end if
                        end if

                        if (in_range($played_note, 0, 127))
                            play_note($played_note, $played_velocity, 0, $played_duration)
                        end if

                        inc($i)
                    end while

                    if ($repeat_counter_note_other < $Repeats - 1)
                        inc($repeat_counter_note_other)
                    else
                        if ($Octave > 0)
                            inc($chord_oct_counter)
                        end if

                        if ($Octave < 0)
                            dec($chord_oct_counter)
                        end if

                        if (abs($chord_oct_counter) > abs($Octave))
                            $chord_oct_counter := 0
                        end if

                        $repeat_counter_note_other := 0
                    end if
            end select

            { advance play counter }
            inc($play_counter)

            if ($repeat_counter_note < $Repeats - 1)
                dec($play_counter)
                inc($repeat_counter_note)
            else
                $repeat_counter_note := 0
            end if

            { reset play counter and get octave counter }
            if ($play_counter >= $cursor)  { we have finished a cycle }
                $play_counter := 0

                if ($Octave > 0)
                    inc($oct_counter)
                end if

                if ($Octave < 0)
                    dec($oct_counter)
                end if

                if (abs($oct_counter) > abs($Octave))
                    $oct_counter := 0
                end if
            end if
        end if

        inc($steps_played)
    end if
end function


on ui_control ($Arp)
    if ($Arp = 0)
        call ClearNoteBuffer()
        call StopSeq()
    end if

    set_text($Arp, "Arp" & !state[$Arp])
end on

on ui_control ($Latch)
    if ($Latch = 0)
        call ClearNoteBuffer()
        call StopSeq()
    end if

    set_text($Latch, "Latch" & !state[$Latch])
end on

on ui_control ($Rate)
    call ChangeRate()
end on

on ui_control ($Octave)
    set_knob_label($Octave, "    " & $Octave)
end on

on ui_control ($Steps)
    set_table_steps_shown(%Pattern, $Steps)
    set_table_steps_shown(%Current, $Steps)
end on


on note
    if ($Arp = 1)
        ignore_event($EVENT_ID)

        { make sure we only receive one event per key }
        if (%note_ids[$EVENT_NOTE] > 0)
            exit
        else
            %note_ids[$EVENT_NOTE] := $EVENT_ID
        end if

        select ($Latch)
            case 0
                %note_buffer[$cursor] := $EVENT_NOTE
                %vel_buffer[$cursor] := $EVENT_VELOCITY

                inc($cursor)
            case 1
                if ($ENGINE_UPTIME - $old_latch_time > $LATCH_TIME)
                    $i := 0
                    while ($i < $cursor)
                        %note_buffer[$i] := 0
                        inc($i)
                    end while

                    $cursor := 0
                end if

                $old_latch_time := $ENGINE_UPTIME
                %note_buffer[$cursor] := $EVENT_NOTE
                %vel_buffer[$cursor] := $EVENT_VELOCITY

                inc($cursor)
        end select

        { start arpegiator }
        if ($cursor < 2 and $seq_running = 0)
            if ($NI_TRANSPORT_RUNNING = 0)
                wait($REC_TIME_TRANSPORT_STOPPED * 1000)
            else
                wait($REC_TIME_TRANSPORT_RUNNING * 1000)
            end if

            call StartSeq()
        end if
    end if
end on


on release
    if (get_event_par($EVENT_ID, $EVENT_PAR_SOURCE) # $CURRENT_SCRIPT_SLOT)
        { make sure we only receive one event per key }
        if (%note_ids[$EVENT_NOTE] = 0)
            exit
        else
            %note_ids[$EVENT_NOTE] := 0
        end if

        if ($seq_running = 1 and $Latch = 0)
            $cursor_helper := 0

            $i := 0
            while ($i < $cursor)
                if ($EVENT_NOTE # %note_buffer[$i])
                    %note_buffer[$cursor_helper] := %note_buffer[$i]
                    inc($cursor_helper)
                end if

                inc($i)
            end while

            $cursor := $cursor_helper

            if ($seq_running = 1 and $cursor = 0)
                call StopSeq()
            end if
        end if
    end if
end on


on listener
    if ($NI_SIGNAL_TYPE = $NI_SIGNAL_TIMER_BEAT and $seq_running = 1)
        call TickReceived()
    end if
end on

{ Various arpeggiator parameters can be accessed through PGS by declaring PGS keys listed below,
  then setting them to appropriate values from another script slot.
  If an out of range value is received, the parameter will remain at last valid value. }
on pgs_changed
    if (pgs_key_exists(ARP) and pgs_get_key_val(ARP, 0) # $prev_arp_mode)
        select (pgs_get_key_val(ARP, 0))
            case 0
                $Arp := 0
                $Latch := 0
            case 1
                $Arp := 1
                $Latch := 0
            case 2
                $Arp := 1
                $Latch := 1
        end select

        $prev_arp_mode := pgs_get_key_val(ARP, 0)

        set_text($Arp, "Arp" & !state[$Arp])
        set_text($Latch, "Latch" & !state[$Latch])

        if (($Arp = 0 or ($Arp = 1 and $Latch = 0)) and $seq_running = 1)
            call ClearNoteBuffer()
            call StopSeq()
        end if
    end if

    if (pgs_key_exists(ARP_ORDER) and pgs_get_key_val(ARP_ORDER, 0) # $NoteOrder)
        if (in_range(pgs_get_key_val(ARP_ORDER, 0), 0, 6))
            $NoteOrder := pgs_get_key_val(ARP_ORDER, 0)
        end if
    end if

    if (pgs_key_exists(ARP_TABLE_ORDER) and pgs_get_key_val(ARP_TABLE_ORDER, 0) # $TableOrder)
        if (in_range(pgs_get_key_val(ARP_TABLE_ORDER, 0), 0, 5))
            $TableOrder := pgs_get_key_val(ARP_TABLE_ORDER, 0)
        end if
    end if

    if (pgs_key_exists(ARP_GATE) and pgs_get_key_val(ARP_GATE, 0) # $Duration)
        if (in_range(pgs_get_key_val(ARP_GATE, 0), 1, 200))
            $Duration := pgs_get_key_val(ARP_GATE, 0)
        end if
    end if

    if (pgs_key_exists(ARP_RATE) and pgs_get_key_val(ARP_RATE, 0) # $Rate)
        if (in_range(pgs_get_key_val(ARP_RATE, 0), 0, 8))
            $Rate := pgs_get_key_val(ARP_RATE, 0)
            call ChangeRate()
        end if
    end if

    if (pgs_key_exists(ARP_SWING) and pgs_get_key_val(ARP_SWING, 0) # $Swing)
        if (in_range(pgs_get_key_val(ARP_SWING, 0), 0, 50))
            $Swing := pgs_get_key_val(ARP_SWING, 0)
        end if
    end if

    if (pgs_key_exists(ARP_OCTAVE) and pgs_get_key_val(ARP_OCTAVE, 0) # $Octave)
        if (in_range(pgs_get_key_val(ARP_OCTAVE, 0), -$MAX_OCTAVE_RANGE, $MAX_OCTAVE_RANGE))
            $Octave := pgs_get_key_val(ARP_OCTAVE, 0)
            set_knob_label($Octave, "    " & $Octave)
        end if
    end if

    if (pgs_key_exists(ARP_REPEATS) and pgs_get_key_val(ARP_REPEATS, 0) # $Repeats)
        if (in_range(pgs_get_key_val(ARP_REPEATS, 0), 0, $MAX_REPEATS))
            $Repeats := pgs_get_key_val(ARP_REPEATS, 0)
        end if
    end if

    if (pgs_key_exists(ARP_STEPS) and pgs_get_key_val(ARP_STEPS, 0) # $Steps)
        if (in_range(pgs_get_key_val(ARP_REPEATS, 0), 2, $MAX_STEPS))
            $Steps := pgs_get_key_val(ARP_STEPS, 0)
            set_table_steps_shown(%Pattern, $Steps)
            set_table_steps_shown(%Current, $Steps)
        end if
    end if

    { ARP_VEL_TABLE PGS key needs to have MAX_STEPS + 1 entries, in order to first write all the
      velocity table values, then trigger reading from PGS array by setting the MAX_STEPS-th
      entry to 1 (remember, arrays and PGS keys in KSP are 0-based!).
      This prevents updating the velocity table values on each velocity table entry update,
      instead the update is done only after the whole velocity table is written into the PGS key. }
    if (pgs_key_exists(ARP_VEL_TABLE) and pgs_get_key_val(ARP_VEL_TABLE, $MAX_STEPS) = 1)
        $k := 0
        while ($k < $MAX_STEPS)
            if (in_range(pgs_get_key_val(ARP_VEL_TABLE, $k), 0, 127))
                %Pattern[$k] := pgs_get_key_val(ARP_VEL_TABLE, $k)
            end if

            inc($k)
        end while

        pgs_set_key_val(ARP_VEL_TABLE, $MAX_STEPS, 0)
    end if
end on
